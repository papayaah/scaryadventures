#!/usr/bin/env node

/**
 * Generate Story Index for Serverless Environment
 * 
 * This script reads all story files and generates TypeScript code
 * that embeds the stories directly in the server bundle.
 * This is necessary because serverless environments can't read files dynamically.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const STORIES_DIR = path.join(__dirname, '../src/client/public/assets/stories');
const OUTPUT_FILE = path.join(__dirname, '../src/server/api/generated-stories.ts');

// Read and parse all story files
function loadAllStories() {
  console.log('🔍 Loading all story files...');

  if (!fs.existsSync(STORIES_DIR)) {
    console.error('❌ Stories directory not found:', STORIES_DIR);
    return [];
  }

  const files = fs.readdirSync(STORIES_DIR);
  const storyFiles = files.filter(file => file.endsWith('.json') && !file.startsWith('.'));

  console.log(`📚 Found ${storyFiles.length} story files`);

  const stories = [];

  for (const filename of storyFiles) {
    try {
      const filePath = path.join(STORIES_DIR, filename);
      const storyData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

      // Add filename to story data for asset path resolution
      storyData.filename = filename;

      stories.push(storyData);
      console.log(`✅ Loaded: ${storyData.story_title} (${storyData.tone}, ${storyData.duration})`);
    } catch (error) {
      console.error(`❌ Error reading ${filename}:`, error.message);
    }
  }

  return stories;
}

// Generate TypeScript code with embedded stories
function generateStoriesCode(stories) {
  const storyCode = stories.map(story => {
    return `  ${JSON.stringify(story, null, 2).replace(/^/gm, '  ').trim()}`;
  }).join(',\n');

  return `// Auto-generated file - DO NOT EDIT MANUALLY
// Generated by tools/generate-story-index.js
// Run 'node tools/generate-story-index.js' to regenerate

import { Story } from '../../shared/types/game.js';

export const EMBEDDED_STORIES: Story[] = [
${storyCode}
];

export const STORY_COUNT = ${stories.length};

// Story metadata for fast filtering
export const STORY_METADATA = EMBEDDED_STORIES.map(story => ({
  story_id: story.story_id,
  story_title: story.story_title,
  tone: story.tone,
  duration: story.duration,
  art_direction: story.art_direction,
  scene_count: story.scenes?.length || 0
}));
`;
}

// Main function
function main() {
  console.log('🎮 Story Index Generator');
  console.log('========================');

  const stories = loadAllStories();

  if (stories.length === 0) {
    console.log('⚠️  No stories found');
    return;
  }

  console.log('\\n📝 Generating TypeScript code...');
  const code = generateStoriesCode(stories);

  // Write the generated code
  fs.writeFileSync(OUTPUT_FILE, code, 'utf8');

  console.log(`✅ Generated: ${OUTPUT_FILE}`);

  // Summary
  const tones = [...new Set(stories.map(s => s.tone))];
  const durations = [...new Set(stories.map(s => s.duration))];
  const totalScenes = stories.reduce((sum, s) => sum + (s.scenes?.length || 0), 0);

  console.log('\\n📊 Summary:');
  console.log(`Total stories: ${stories.length}`);
  console.log(`Total scenes: ${totalScenes}`);
  console.log(`Tones: ${tones.join(', ')}`);
  console.log(`Durations: ${durations.join(', ')}`);

  console.log('\\n🚀 Next steps:');
  console.log('1. Update src/server/api/stories.ts to import from generated-stories.ts');
  console.log('2. Test with npm run dev');
  console.log('3. Deploy to Reddit');

  console.log('\\n💡 All stories are now embedded in the server bundle!');
  console.log('   This works perfectly with serverless environments like Devvit.');
}

// Run main function if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { loadAllStories, generateStoriesCode };